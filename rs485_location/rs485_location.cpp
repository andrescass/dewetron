// Copyright DEWETRON GmbH 2020
#include "odkfw_properties.h"
#include "odkfw_software_channel_plugin.h"

// Manifest constains necessary metadata for oxygen plugins
//   OxygenPlugin.name: unique plugin identifier; please use your (company) name to avoid name conflicts. This name is also used as a prefix in all custom config item keys.
//   OxygenPlugin.uuid: unique number (generated by a GUID/UUID generator tool) that stored in configuration files to match channels etc. to the correct plugin
static const char* PLUGIN_MANIFEST =
R"XML(<?xml version="1.0"?>
<OxygenPlugin name="VERA_RS485_LOCATION" version="1.0" uuid="8117B8EC-E32F-42D2-8687-0D33BD7A87DA">
  <Info name="RS485 location decode plugin">
    <Vendor name="Vera Software"/>
    <Description>Takes a rs485 data frame, decode it and send location data in multiple channels</Description>
  </Info>
  <Host minimum_version="5.0.1"/>
</OxygenPlugin>
)XML";

// A minimal translation file that maps the internal ConfigItem key to a nicer text for the user
static const char* TRANSLATION_EN =
R"XML(<?xml version="1.0"?>
<TS version="2.1" language="en" sourcelanguage="en">
</TS>
)XML";


// Keys for ConfigItems that are used to store channel settings

// Custom key (prefixed by plugin name) to store path to the input file

// Value of common Oxygen key "SampleRate" determines the sample frequency and the playback rate for the channel

using namespace odk::framework;

class RS485LocationChannel : public SoftwareChannelInstance
{
public:

	RS485LocationChannel()
		: m_port_number(new EditableScalarProperty(1, "", 1, 9))
		, m_port_baudrate(new EditableScalarProperty(9600, "bps", 2800, 500000))
		, m_port_parity(new EditableStringProperty("None"))
		, m_port_octet_N(new EditableScalarProperty(87, "", 1, 90))
    {
		// Some options for selectors
		m_port_baudrate->addOption(9600);
		m_port_baudrate->addOption(19200);
		m_port_baudrate->addOption(115200);

		m_port_parity->addOption("None");
		m_port_parity->addOption("Even");
		m_port_parity->addOption("Odd");
    }

    // Describe how the software channel should be shown in the "Add Channel" dialog
    static odk::RegisterSoftwareChannel getSoftwareChannelInfo()
    {
        odk::RegisterSoftwareChannel telegram;
        telegram.m_display_name = "RS485 Location plugin";
        telegram.m_service_name = "CreateChannel";
        telegram.m_display_group = "Data Sources";
        telegram.m_description = "Adds multiple channels with location info";
        return telegram;
    }

    bool update() override
    {
        return true;

    }

    void create(odk::IfHost* host) override
    {
    }

    bool configure(
        const odk::UpdateChannelsTelegram& request,
        std::map<std::uint32_t, std::uint32_t>& channel_id_map) override
    {
        configureFromTelegram(request, channel_id_map);
        return true;
    }

    void prepareProcessing(odk::IfHost* host) override
    {
    }

    void process(ProcessingContext& context, odk::IfHost *host) override
    {
    }

private:
	std::shared_ptr<EditableScalarProperty> m_port_number;
	std::shared_ptr<EditableScalarProperty> m_port_baudrate;
	std::shared_ptr<EditableStringProperty> m_port_parity;
	std::shared_ptr<EditableScalarProperty> m_port_octet_N;
};

class RS485LocationPlugin : public SoftwareChannelPlugin<RS485LocationChannel>
{
public:
    void registerTranslations() final
    {
        addTranslation(TRANSLATION_EN);
    }
};

OXY_REGISTER_PLUGIN1("VERA_RS485_LOCATION", PLUGIN_MANIFEST, RS485LocationPlugin);

